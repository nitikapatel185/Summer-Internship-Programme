//Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int arr[] = new int[2];
        for(int i=0;i<nums.length;i++)
        {
            for(int j=i+1;j<nums.length;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    arr[0]=i;
                    arr[1]=j;
                }
            }
        }
        return arr;
    }
}

//Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

class Solution
{
    public int reverse(int x) 
    {
 int rev = 0;
        while(x!=0)
        {
            if(rev>214748364 || rev <-214748364)
            {
                return 0;
            }
            rev=rev*10+x%10;
            x=x/10;
        }
        return rev;
    }
    
}
//Given an integer x, return true if x is palindrome integer.

An integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.

class Solution {
    public boolean isPalindrome(int x) {
if(x==0)
    return true;
        else if(x>0)
        {
            int temp=x, sum=0,r;
            while(temp>0)
            {
                r=temp%10;
                sum=(sum*10)+r;
                temp=temp/10;
            }
            if(sum==x)
                return true;
            else
                return false;
        }
        else
        {
            return false;
        }
    }
}
